Back-end Development 

Html+Javascript/CSS-SASS/Advance JS/REact/NodeExpress/MongoDB

M5-full stack developer require mastery of both backend and frondend 

Web Services (Rest),Client-server Architecture, NodeJs, Express JS, Middlewares

Express- help creating web services and adding functionalities
Middlewares- aditional functionalities that we can add to our web services 

Frontend Vs Backend 
Frontend: user interaction, client side code . The client consume the server via HTTP Requests
BackEnd: data persistance , single source of truth, server side code. The server provides services responding with HTTP Responses via Endpoints 

Backend main features
-Data persistance 
-Authentication/Authorization
-User custom experience

WebAPI's

NodeJs
ExpressJS, Routes, CRUD
Middlewares, Error Handling, CORS

NodeJs-javascript runtime build on Chrome's V8 Javascript engine 
Agile- development methodology based on iterative and incremental approach 

HTTP
HyperText Transfer Protocol 
it's a message that you are sending to the server 
every message is called a REQUEST
every reply is called RESPONSE
The rquest contains
URL => httpls://google.com/apis/test
Method => GET, POST, PUT, PATCH, DELETE
PATCH- works on just a field , for example
Headers => Authorization, Cookies, Content-Type 
Payload => data or empty

HTTPS is just the secure (encrypted) version of HTTP
The method tells the endpoint the purpose of our request
GET => I want some information
POST=> i'm sending some information
PUT => I want to edit something 
DELETE => i want to delete something 
most used methods in modern API
Headers specifies some extra information about the request
Content-Type => I'm sending data in JSON format 
Authorization => This is my key to authorize me 
Accept => I expect to receive back some JSON data
Cookie 
Create custom headers 
payload is actually to send some information
HTTPS Response
is sent by the server to reply to the Request
Payload => contains the information requested by the request
Status Code => tell us result of the operation 
Headers => extra info 
HTTP Response-Status Code
200 OK=> contains the information requested bt the request
201 Created => tells us the result of the operation 
400 Bad Request=> there is something wrong with your request
401 Unauthorized => you are not authorized 
404 Not found => cannot find the info you are looking for 
500 internal server error => something wrong, server side 

JSON 
Javascript Object Notation 
Data interchange format 
Javascript friendly 

Backend 
Combination of DB + software written in a server side language 
Server side code directly interact with the DB with some Apis which could fetch 

WebAPI
API => Application Programming Interface 
WebAPI => API over the web which can be accessed using HTTP protocol 
WebAPI => collection of endpoints 

NodeJS M5-D1
Thread Processing / Waiting 
Blocking / Non Blocking 
Event Loop
NPM 
(package manager)
largest ecosystem of open source libraries in the world 
Package.json
everything will start from here
is a kind of manifest for your project
It's where npm store the name and version for all the modules installed 

Modules 
Modularity at it's best 
Core modules/Local Modules/Third party modules 

Pros
Javascript everywhere / speed and performances / Community and ecosystem 
Cons
Javascript everywhere / speed and performances / Community and ecosystem 




